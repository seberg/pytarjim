This is a quick hack for a transliteration program using the arabxetex mapping
files. It parses the (simple) arabxetex mappings into python regular expressions.

The program will store config in a pytarjim_config.txt in the current folder
simply, but the window config is internally stored only if it is minimized by
clicking the tray icon.


Arabic
======

TRANSLITERATION
---------------

Examples: al-l___u.gaT, al-l-----|u.gaT, `ayn (Ayn), 'ax (Hamza), al'An, jiddaan,
    jiddan, mi.sriy, h_a_dA, al-ll_ah (ligature), al-ll|_ah (no ligature), 42
    The result if encoding is right and your font understands arabic (and
    vocalization is on):
اللـــُغَة، اللــُغَة، عَين، أَخ، اَلآن، جِدَّان، جِدَّن، مِصرِي، هٰذَا، ﷲ، اللّٰه، ٤٢

Emphatic consonants: .h, .s, etc.
The th sounds: _t, _d and .z
Vowels: A, U, I, uw, iy, aa, uu, ii work for long vowels (in latex, the double
    version can be problematic with hamza).
Consontants: w = U and y = I (without short consonants before)
Shadda: Double consant without vowel in between gets a shadda however
    long vowel + consant seems random...

Otherwise: Just try and/or read the arabxetex documentation.


Kannada
=======

Added preliminary Kannada support with a custom mapping. As of now it does
not work perfectly yet, and may have a few odd transliteration methods
for some letters.

Generally, consonants such as kh, dh, th, bh, and `^sh` work.
The sh sound (as in shin) is transliterated as in the arabic version with ^s.
A couple of consonants are currently prepended by a period `.t`, `.th`, `.d`,
`.dh`, and `.h` (ತ, ತ್ಹ, ದ, ದ್ಹ, ಹ್), which is not equivalent to arabic emphatic
sounds. An `'` can be used to forcably remove the short vowel a. It  may
be necessary in composits such as `d'ha` to avoid the `dh` consonant?
Rarer consonants are `_n` and `_N` which should get better ways of writing
there is a chance that some are still missing.
